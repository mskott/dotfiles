#+TITLE: Martins EMACS configuration

* Table of contents                                            :TOC:noexport:
- [[#emacs][EMACS]]
- [[#ivy-mode][Ivy mode]]
- [[#markdown][Markdown]]
- [[#magit][Magit]]
- [[#org-mode][Org Mode]]
- [[#olivetti-mode][Olivetti mode]]
- [[#fonts][Fonts]]
- [[#handle-whitespace][Handle whitespace]]
- [[#yaml-mode][YAML mode]]
- [[#json-mode][JSON mode]]
- [[#spellchecking][Spellchecking]]
- [[#treemacs][Treemacs]]

* EMACS

  Hint: align comments using ~align-regexp~

  #+BEGIN_SRC emacs-lisp
	(setq-default
	 inhibit-startup-screen t			; Disable startup screen
	 tab-width 4						; Smaller tabs
	 indend-tabs-mode nil				; Spaces instead of tabs
	 visible-bell t						; No beep
	 )

	(global-auto-revert-mode t)			; Reload changed files
	(electric-pair-mode)				; Smart handling of parens
	(set-default-coding-systems 'utf-8)	; Default to UTF-8 encoding
	(tool-bar-mode -1)					; Disable the toolbar
	(column-number-mode t)				; Display column number in modeline
  #+END_SRC

* Ivy mode

  [[https://oremacs.com/swiper/][Ivy mode manual]]

  #+BEGIN_SRC emacs-lisp
	(use-package ivy
	  :ensure t
	  :config
	  (ivy-mode 1))
  #+END_SRC

 [[https://github.com/Yevgnen/ivy-rich][Ivy Rich]]

#+BEGIN_SRC emacs-lisp
  ;; (use-package ivy-rich
  ;;   :ensure t
  ;;   :after ivy
  ;;   :init
  ;;   (ivy-rich-mode 1)
  ;;   (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
  ;;   )
#+END_SRC

[[https://github.com/wilfred/helpful][Helpful]] makes Emacs help functions nice

#+BEGIN_SRC emacs-lisp
;  (use-package helpful
;	:ensure t)
#+END_SRC

* Markdown

  [[https://jblevins.org/projects/markdown-mode/][Markdown-mode]]

  #+BEGIN_SRC emacs-lisp
	(use-package markdown-mode
	  :ensure t
	  :custom
	  (markdown-asymmetric-header t)		; Only place header markup at begging of line
	  :hook
	  (markdown-mode . variable-pitch-mode)	; Display text in a variable pitch
	  (markdown-mode . visual-line-mode)	; Better handling of long line
	  )
  #+END_SRC

* Magit

  - [[https://magit.vc/][Magit]]
  [[https://emacsair.me/2017/09/01/magit-walk-through/][- Magit walk through]]

  #+BEGIN_SRC emacs-lisp
	(use-package magit
	  :ensure t)
  #+END_SRC

* Org Mode

  [[https://orgmode.org/][Org Mode]]

  Use ~describe-face~ to lookup faces and their use.

  #+BEGIN_SRC emacs-lisp
	(defun ms/org-font-setup ()
	  ;; Ensure some things are rendered as fixed-pitch even in variable-pitch mode
	  ;; Should be done with use-package :custom-face, but I couldn't get it to work with multiple faces
	  (set-face-attribute 'org-block nil			:foreground nil :inherit 'fixed-pitch)
	  (set-face-attribute 'org-checkbox nil			:inherit 'fixed-pitch)
	  (set-face-attribute 'org-code nil				:inherit '(shadow fixed-pitch))
	  (set-face-attribute 'org-meta-line nil		:inherit '(font-lock-comment-face fixed-pitch))
	  (set-face-attribute 'org-special-keyword nil	:inherit '(font-lock-comment-face fixed-pitch))
	  (set-face-attribute 'org-table nil			:inherit '(shadow fixed-pitch))
	  (set-face-attribute 'org-verbatim nil			:inherit '(shadow fixed-pitch)))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
	(use-package org
	  :ensure t
	  :custom
	  (org-src-tab-acts-natively t)
	  (org-return-follows-link t)			; Follow links when pressing RET
	  :bind (("C-c l" . org-store-link)
			 ("C-c a" . org-agenda)
			 ("C-c c" . org-capture))
	  :hook
	  (org-mode . variable-pitch-mode)	; Display text in a variable pitch
	  (org-mode . visual-line-mode)		; Better handling of long line
	  :config
	  (ms/org-font-setup)
	  (setq org-agenda-files (list "~/Org" "~/Org/journal" "~/Org/Norlys")))
  #+END_SRC

  [[https://github.com/snosov1/toc-org][Toc Org]]

  Use toc-org to generate table of contents. Put ~:TOC:~ tag (C-c C-q) to a heading and run ~toc-org-insert-toc~ to insert a toc

  #+BEGIN_SRC emacs-lisp
	(use-package toc-org
	  :ensure t
	  :after org
	  :hook
	  (org-mode . toc-org-mode)
	  (markdown-mode . toc-org-mode))
  #+END_SRC

  Org-mode likes to use htlmize when publishing documents with code in them.

  #+BEGIN_SRC emacs-lisp
	(use-package htmlize
	  :ensure t
	  :after org)
  #+END_SRC

  #+begin_src emacs-lisp
	(use-package org-journal
	  :ensure t
	  :after org
	  :config
	  (setq org-journal-dir "~/Org/journal/"
			org-journal-file-format "%Y-%m.org"
			org-journal-date-format "%Y-%m-%d"
			org-journal-file-type 'monthly
			org-journal-carryover-items ""))
  #+end_src

* Olivetti mode

  #+BEGIN_SRC emacs-lisp
	(use-package olivetti
	  :ensure t
	  :hook
	  (org-mode . olivetti-mode)
	  :custom
	  (olivetti-body-width 120)) ; Make text body a bit wider
  #+END_SRC

* Fonts

  Fonts are strange - be carefull when setting hight, 20 is way too small.
  
  #+BEGIN_SRC emacs-lisp
	;; Default face
	(set-face-attribute 'default nil
						:font "DejaVu Sans Mono"
						:height 100)

	;; Fixed pitch face (aka. monospace text)
	(set-face-attribute 'fixed-pitch nil
						:font "DejaVu Sans Mono"
						:height 100)

	;; Variable pitch face - good for documents
	(set-face-attribute 'variable-pitch nil
						:font "Cantarell"
						:height 110
						:weight 'regular)
  #+END_SRC

  The changes above makes some parts of Org buffers look wrong since they are  better off being monospaced - see Org-mode for how to fix.

* Handle whitespace

  https://github.com/lewang/ws-butler

  #+BEGIN_SRC emacs-lisp
	(use-package ws-butler
	  :ensure t
	  :hook
	  (text-mode . ws-butler-mode)
	  (prog-mode . ws-butler-mode))
  #+END_SRC

* YAML mode

  #+BEGIN_SRC emacs-lisp
	(use-package yaml-mode
	  :ensure t)
  #+END_SRC

* JSON mode

#+BEGIN_SRC emacs-lisp
  (use-package json-mode
	:ensure t
	)
#+END_SRC

* Spellchecking

  #+BEGIN_SRC emacs-lisp
	(use-package flyspell
	  :ensure t
	  ;; :hook
	  ;; (text-mode . flyspell-mode)
	  )

	(use-package flyspell-correct
	  :after flyspell
	  :ensure t
	  :bind (:map flyspell-mode-map ("C-;" . flyspell-correct-wrapper)))

	(use-package flyspell-correct-ivy
	  :after flyspell-correct
	  :ensure t)
  #+END_SRC

* Treemacs
  https://github.com/Alexander-Miller/treemacs

  Most of the configuration below is default from the [[https://github.com/Alexander-Miller/treemacs#installation][installation guide]].

  #+begin_src emacs-lisp
	(use-package treemacs
	  :ensure t
	  :defer t
	  :init
	  :config
	  (progn
		(setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
			  treemacs-deferred-git-apply-delay        0.5
			  treemacs-directory-name-transformer      #'identity
			  treemacs-display-in-side-window          t
			  treemacs-eldoc-display                   'simple
			  treemacs-file-event-delay                5000
			  treemacs-file-extension-regex            treemacs-last-period-regex-value
			  treemacs-file-follow-delay               0.2
			  treemacs-file-name-transformer           #'identity
			  treemacs-follow-after-init               t
			  treemacs-expand-after-init               t
			  treemacs-find-workspace-method           'find-for-file-or-pick-first
			  treemacs-git-command-pipe                ""
			  treemacs-goto-tag-strategy               'refetch-index
			  treemacs-indentation                     2
			  treemacs-indentation-string              " "
			  treemacs-is-never-other-window           nil
			  treemacs-max-git-entries                 5000
			  treemacs-missing-project-action          'ask
			  treemacs-move-forward-on-expand          nil
			  treemacs-no-png-images                   nil
			  treemacs-no-delete-other-windows         t
			  treemacs-project-follow-cleanup          nil
			  treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
			  treemacs-position                        'left
			  treemacs-read-string-input               'from-child-frame
			  treemacs-recenter-distance               0.1
			  treemacs-recenter-after-file-follow      nil
			  treemacs-recenter-after-tag-follow       nil
			  treemacs-recenter-after-project-jump     'always
			  treemacs-recenter-after-project-expand   'on-distance
			  treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
			  treemacs-show-cursor                     nil
			  treemacs-show-hidden-files               t
			  treemacs-silent-filewatch                nil
			  treemacs-silent-refresh                  nil
			  treemacs-sorting                         'alphabetic-asc
			  treemacs-select-when-already-in-treemacs 'move-back
			  treemacs-space-between-root-nodes        t
			  treemacs-tag-follow-cleanup              t
			  treemacs-tag-follow-delay                1.5
			  treemacs-text-scale                      nil
			  treemacs-user-mode-line-format           nil
			  treemacs-user-header-line-format         nil
			  treemacs-wide-toggle-width               70
			  treemacs-width                           35
			  treemacs-width-increment                 1
			  treemacs-width-is-initially-locked       t
			  treemacs-workspace-switch-cleanup        nil)

		;; The default width and height of the icons is 22 pixels. If you are
		;; using a Hi-DPI display, uncomment this to double the icon size.
		;;(treemacs-resize-icons 44)

		(treemacs-follow-mode t)
		(treemacs-filewatch-mode t)
		(treemacs-fringe-indicator-mode 'always)

		(pcase (cons (not (null (executable-find "git")))
					 (not (null treemacs-python-executable)))
		  (`(t . t)
		   (treemacs-git-mode 'deferred))
		  (`(t . _)
		   (treemacs-git-mode 'simple)))

		(treemacs-hide-gitignored-files-mode nil))
	  :bind
	  (:map global-map
			("M-0"       . treemacs-select-window)
			("C-x t 1"   . treemacs-delete-other-windows)
			("C-x t t"   . treemacs)
			("C-x t d"   . treemacs-select-directory)
			("C-x t B"   . treemacs-bookmark)
			("C-x t C-t" . treemacs-find-file)
			("C-x t M-t" . treemacs-find-tag)))

	(use-package treemacs-magit
	  :after (treemacs magit)
	  :ensure t)
  #+end_src
