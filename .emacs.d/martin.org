#+TITLE: Martins EMACS configuration

* Table of contents                                            :TOC:noexport:
- [[#emacs][EMACS]]
- [[#use-package][Use package]]
- [[#colour-theme][Colour theme]]
- [[#ivy-mode][Ivy mode]]
- [[#markdown][Markdown]]
- [[#magit][Magit]]
- [[#org-mode][Org Mode]]
  - [[#general-org-configuration][General Org configuration]]
  - [[#org-journal-mode][Org Journal mode]]
- [[#fonts][Fonts]]
- [[#handle-whitespace][Handle whitespace]]
- [[#yaml-mode][YAML mode]]
- [[#json-mode][JSON mode]]
- [[#spellchecking][Spellchecking]]
- [[#treemacs][Treemacs]]
- [[#completion-using-company-mode][Completion using company-mode]]
- [[#eglot][Eglot]]
- [[#progamming-languages][Progamming languages]]
  - [[#golang][Golang]]
  - [[#python][Python]]

* EMACS

  Hint: align comments using ~align-regexp~

  #+BEGIN_SRC emacs-lisp
    (setq-default
     inhibit-startup-screen t			; Disable startup screen
     tab-width 4						; Smaller tabs
     indent-tabs-mode nil				; Spaces instead of tabs
     visible-bell t						; No beep
     )

    (global-auto-revert-mode t)			; Reload changed files
    (electric-pair-mode)				; Smart handling of parens
    (set-default-coding-systems 'utf-8)	; Default to UTF-8 encoding
    (tool-bar-mode -1)					; Disable the toolbar
    (scroll-bar-mode -1)                ; Disable vertical scroll bars
    (column-number-mode t)				; Display column number in modeline
    (global-hl-line-mode t)				; Always highlight current line
  #+END_SRC

* Use package
[[https://github.com/jwiegley/use-package][Use package]] is configured in [[file:init.el][init.el]]. Here is [[https://ianyepan.github.io/posts/setting-up-use-package/][a simple tutorial]].

* Colour theme

Install the [[https://github.com/bbatsov/solarized-emacs][Solarized theme]]. Both ~solarized-dark~ and ~solarized-ligth~ are good.

#+begin_src emacs-lisp
  (use-package solarized-theme
	:init
	(setq solarized-scale-markdown-headlines t)
	:config
	(load-theme 'solarized-light t)
	)
#+end_src

* Ivy mode

  [[https://oremacs.com/swiper/][Ivy mode manual]]

  #+BEGIN_SRC emacs-lisp
	(use-package ivy
	  :config
	  (ivy-mode 1))
  #+END_SRC

 [[https://github.com/Yevgnen/ivy-rich][Ivy Rich]]

#+BEGIN_SRC emacs-lisp
  ;; (use-package ivy-rich
  ;;   :ensure t
  ;;   :after ivy
  ;;   :init
  ;;   (ivy-rich-mode 1)
  ;;   (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
  ;;   )
#+END_SRC

* Markdown

  [[https://jblevins.org/projects/markdown-mode/][Markdown-mode]]

  #+BEGIN_SRC emacs-lisp
	(use-package markdown-mode
	  :custom
	  (markdown-asymmetric-header t)		; Only place header markup at begging of line
	  :hook
	  (markdown-mode . visual-line-mode)	; Better handling of long line
	  )
  #+END_SRC

* Magit

  - [[https://magit.vc/][Magit]]
  [[https://emacsair.me/2017/09/01/magit-walk-through/][- Magit walk through]]

  #+BEGIN_SRC emacs-lisp
	(use-package magit)
  #+END_SRC

* Org Mode

  [[https://orgmode.org/][Org Mode]]

** General Org configuration

  #+BEGIN_SRC emacs-lisp
    (use-package org
      :custom
      (org-src-tab-acts-natively t)
      (org-return-follows-link t)	; Follow links when pressing RET
      (org-reverse-note-order t)    ; Store new notes in beginning of entry
      :bind (("C-c l" . org-store-link)
             ("C-c a" . org-agenda)
             ("C-c c" . org-capture))
      :hook
      (org-mode . visual-line-mode)	; Better handling of long line
      :config
      (setq org-default-notes-file "~/Org/inbox.org"
            org-agenda-files (list "~/Org" "~/Org/journal" "~/Org/Customers" "~/Org/Products")
            org-refile-targets '((org-agenda-files . (:maxlevel . 2)))
            org-special-ctrl-a/e t ; Change C-a/C-e behaviour on headlines
            ))
  #+END_SRC

  [[https://github.com/snosov1/toc-org][Toc Org]]

  Use toc-org to generate table of contents. Put ~:TOC:~ tag (C-c C-q) to a heading and run ~toc-org-insert-toc~ to insert a toc

  #+BEGIN_SRC emacs-lisp
	(use-package toc-org
	  :after org
	  :hook
	  (org-mode . toc-org-mode)
	  (markdown-mode . toc-org-mode))
  #+END_SRC

  Org-mode likes to use htlmize when publishing documents with code in them.

  #+BEGIN_SRC emacs-lisp
	(use-package htmlize
	  :after org)
  #+END_SRC

  Make Org look modern
  #+begin_src emacs-lisp
    ;(use-package org-modern
    ;  :after org
    ;  :hook
    ;  (org-mode . org-modern-mode))
  #+end_src

** Org Journal mode

  #+begin_src emacs-lisp
    ;; (use-package org-journal
    ;;   :after org
    ;;   :config
    ;;   (setq org-journal-dir "~/Org/journal/"
    ;; 		org-journal-file-format "%Y-%m.org"
    ;; 		org-journal-date-format "%Y-%m-%d"
    ;; 		org-journal-file-type 'monthly
    ;; 		org-journal-carryover-items ""))
  #+end_src

* Fonts

  Fonts are strange - be carefull when setting hight, 20 is way too small.
  _Roboto Mono_ is available in Fedora in the package ~google-roboto-mono-fonts~. Another option is _Source Code Pro_ which also looks good.
  
  #+BEGIN_SRC emacs-lisp
    ;; Default face
    (set-face-attribute 'default nil
                        :font "Roboto Mono"
                        :height 120)

    ;; Fixed pitch face (aka. monospace text)
    (set-face-attribute 'fixed-pitch nil
                        :font "Roboto Mono"
                        :height 120)
  #+END_SRC

* Handle whitespace

  https://github.com/lewang/ws-butler

  #+BEGIN_SRC emacs-lisp
	(use-package ws-butler
	  :hook
	  (text-mode . ws-butler-mode)
	  (prog-mode . ws-butler-mode))
  #+END_SRC

* YAML mode

  #+BEGIN_SRC emacs-lisp
	(use-package yaml-mode)
  #+END_SRC

* JSON mode

#+BEGIN_SRC emacs-lisp
  (use-package json-mode)
#+END_SRC

* Spellchecking

  #+BEGIN_SRC emacs-lisp
	(use-package flyspell
	  ;; :hook
	  ;; (text-mode . flyspell-mode)
	  )

	(use-package flyspell-correct
	  :after flyspell
	  :bind (:map flyspell-mode-map ("C-;" . flyspell-correct-wrapper)))

	(use-package flyspell-correct-ivy
	  :after flyspell-correct)
  #+END_SRC

* Treemacs
  https://github.com/Alexander-Miller/treemacs

  Most of the configuration below is default from the [[https://github.com/Alexander-Miller/treemacs#installation][installation guide]].

  #+begin_src emacs-lisp
	(use-package treemacs
	  :defer t
	  :init
	  :config
	  (progn
		(setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
			  treemacs-deferred-git-apply-delay        0.5
			  treemacs-directory-name-transformer      #'identity
			  treemacs-display-in-side-window          t
			  treemacs-eldoc-display                   'simple
			  treemacs-file-event-delay                5000
			  treemacs-file-extension-regex            treemacs-last-period-regex-value
			  treemacs-file-follow-delay               0.2
			  treemacs-file-name-transformer           #'identity
			  treemacs-follow-after-init               t
			  treemacs-expand-after-init               t
			  treemacs-find-workspace-method           'find-for-file-or-pick-first
			  treemacs-git-command-pipe                ""
			  treemacs-goto-tag-strategy               'refetch-index
			  treemacs-indentation                     2
			  treemacs-indentation-string              " "
			  treemacs-is-never-other-window           nil
			  treemacs-max-git-entries                 5000
			  treemacs-missing-project-action          'ask
			  treemacs-move-forward-on-expand          nil
			  treemacs-no-png-images                   nil
			  treemacs-no-delete-other-windows         t
			  treemacs-project-follow-cleanup          nil
			  treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
			  treemacs-position                        'left
			  treemacs-read-string-input               'from-child-frame
			  treemacs-recenter-distance               0.1
			  treemacs-recenter-after-file-follow      nil
			  treemacs-recenter-after-tag-follow       nil
			  treemacs-recenter-after-project-jump     'always
			  treemacs-recenter-after-project-expand   'on-distance
			  treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
			  treemacs-show-cursor                     nil
			  treemacs-show-hidden-files               t
			  treemacs-silent-filewatch                nil
			  treemacs-silent-refresh                  nil
			  treemacs-sorting                         'alphabetic-asc
			  treemacs-select-when-already-in-treemacs 'move-back
			  treemacs-space-between-root-nodes        t
			  treemacs-tag-follow-cleanup              t
			  treemacs-tag-follow-delay                1.5
			  treemacs-text-scale                      nil
			  treemacs-user-mode-line-format           nil
			  treemacs-user-header-line-format         nil
			  treemacs-wide-toggle-width               70
			  treemacs-width                           35
			  treemacs-width-increment                 1
			  treemacs-width-is-initially-locked       t
			  treemacs-workspace-switch-cleanup        nil)

		;; The default width and height of the icons is 22 pixels. If you are
		;; using a Hi-DPI display, uncomment this to double the icon size.
		;;(treemacs-resize-icons 44)

		(treemacs-follow-mode t)
		(treemacs-filewatch-mode t)
		(treemacs-fringe-indicator-mode 'always)

		(pcase (cons (not (null (executable-find "git")))
					 (not (null treemacs-python-executable)))
		  (`(t . t)
		   (treemacs-git-mode 'deferred))
		  (`(t . _)
		   (treemacs-git-mode 'simple)))

		(treemacs-hide-gitignored-files-mode nil))
	  :bind
	  (:map global-map
			("M-0"       . treemacs-select-window)
			("C-x t 1"   . treemacs-delete-other-windows)
			("C-x t t"   . treemacs)
			("C-x t d"   . treemacs-select-directory)
			("C-x t B"   . treemacs-bookmark)
			("C-x t C-t" . treemacs-find-file)
			("C-x t M-t" . treemacs-find-tag)))

	(use-package treemacs-magit
	  :after (treemacs magit))
  #+end_src

* Completion using company-mode
Configure in-buffer completion using [[https://company-mode.github.io/][company-mode]].

#+begin_src emacs-lisp
  (use-package company
    :config
    (global-company-mode t))
#+end_src

* Eglot
Language server fedora packages:
- Go :: gopls
- Python :: python3-lsp-server

The language server for Ansible is not packaged for Fedora. It can be installed using ~npm i @ansible/ansible-language-server~ and adding its bin/ to the PATH.
#+begin_src emacs-lisp
  (use-package eglot
    :config
    (add-to-list 'eglot-server-programs
                 '(yaml-mode . ("ansible-language-server" "--stdio"))))
#+end_src

* Progamming languages
** Golang
#+begin_src emacs-lisp
  (use-package go-mode
    :hook
    (go-mode . eglot-ensure))
#+end_src


** Python
#+begin_src emacs-lisp
  (use-package python-mode
    :hook
    (python-mode . eglot-ensure))
#+end_src
